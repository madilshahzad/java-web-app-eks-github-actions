name: Main Workflow

on:
  push:
    branches:
      - master


  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - feature/*
      - feature-*
      - feature-*/**

jobs:
  trigger_infrastructure_provisioning:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Infrastructure Provisioning Workflow
        id: trigger_infra_provision
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/madilshahzad/infrastructure-provisioning/actions/workflows/infrastructure-provisioning.yaml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "TF_ENVIRONMENT": "prod"
              }
            }')

          # Sleep to allow workflow to start
          sleep 10

          # Retry mechanism to fetch the workflow run ID
          for i in {1..5}; do
            run_id=$(curl -s \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/madilshahzad/infrastructure-provisioning/actions/runs \
              | jq -r '.workflow_runs[] | select(.event == "workflow_dispatch") | .id' | head -n 1)

            if [[ -n "$run_id" ]]; then
              echo "Workflow Run ID fetched: $run_id"
              break
            fi

            echo "Retrying to fetch Run ID in 10 seconds..."
            sleep 10
          done

          if [[ -z "$run_id" ]]; then
            echo "Failed to fetch Infrastructure Provisioning Workflow Run ID"
            exit 1
          fi

          echo "run_id_infra_provision=${run_id}" >> $GITHUB_ENV

      - name: Poll Infrastructure Provisioning Workflow Status
        run: |
          status="in_progress"
          while [[ "$status" == "in_progress" || "$status" == "queued" ]]; do
            echo "Polling Infrastructure Provisioning workflow status..."
            response=$(curl -s \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/madilshahzad/infrastructure-provisioning/actions/runs/${{ env.run_id_infra_provision }})

            status=$(echo "$response" | jq -r '.status')
            conclusion=$(echo "$response" | jq -r '.conclusion')

            echo "Current status: $status"
            [[ "$status" == "completed" ]] && break
            sleep 10
          done

          echo "Infrastructure Provisioning workflow completed with conclusion: $conclusion"
          if [[ "$conclusion" != "success" ]]; then
            echo "Infrastructure Provisioning workflow failed!"
            exit 1
          fi

  trigger_build_and_deploy:
    needs: trigger_infrastructure_provisioning
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG_DEPLOY: ${{ steps.fetch_output.outputs.IMAGE_TAG_DEPLOY }}

    steps:
      - name: Trigger Build and Deploy Workflow
        id: trigger_build_deploy
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/madilshahzad/Build-Deploy/actions/workflows/build-deploy.yml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "DOCKERFILE_PATH": "./Dockerfile",
                "CONTEXT_PATH": ".",
                "APP_NAME": "java-web-app"
              }
            }')

          # Sleep to allow workflow to start
          sleep 10

          # Retry mechanism to fetch the workflow run ID
          for i in {1..5}; do
            run_id=$(curl -s \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/madilshahzad/Build-Deploy/actions/runs \
              | jq -r '.workflow_runs[] | select(.event == "workflow_dispatch") | .id' | head -n 1)

            if [[ -n "$run_id" ]]; then
              echo "Workflow Run ID fetched: $run_id"
              break
            fi

            echo "Retrying to fetch Run ID in 10 seconds..."
            sleep 10
          done

          if [[ -z "$run_id" ]]; then
            echo "Failed to fetch Build and Deploy Workflow Run ID"
            exit 1
          fi

          echo "run_id_build_deploy=${run_id}" >> $GITHUB_ENV

      - name: Poll Build and Deploy Workflow Status
        run: |
          status="in_progress"
          while [[ "$status" == "in_progress" || "$status" == "queued" ]]; do
            echo "Polling Build and Deploy workflow status..."
            response=$(curl -s \
              -H "Authorization: token ${{ secrets.PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/madilshahzad/Build-Deploy/actions/runs/${{ env.run_id_build_deploy }})

            status=$(echo "$response" | jq -r '.status')
            conclusion=$(echo "$response" | jq -r '.conclusion')

            echo "Current status: $status"
            [[ "$status" == "completed" ]] && break
            sleep 10
          done

          echo "Build and Deploy workflow completed with conclusion: $conclusion"
          if [[ "$conclusion" != "success" ]]; then
            echo "Build and Deploy workflow failed!"
            exit 1
          fi

  trigger_kubernetes_deployment:
    needs: trigger_build_and_deploy
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Kubernetes Deployment Workflow
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://github.com/madilshahzad/helm_charts/blob/main/.github/workflows/kubernetes-deployment.yaml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "image_tag": "${{ needs.trigger_build_and_deploy.outputs.IMAGE_TAG_DEPLOY }}",
                "aws_role_arn": "${{ secrets.AWS_ROLE_ARN }}",
                "aws_region": "${{ secrets.AWS_REGION }}",
                "ecr_repository_name": "java-web-app",
                "docker_repository": "${{ secrets.DOCKER_REPOSITORY }}"
              }
            }')

          echo "Triggered Kubernetes Deployment Workflow"
